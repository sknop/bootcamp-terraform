---
all:
  vars:
    ansible_connection: ssh
    ansible_user: ubuntu
    ansible_become: true

    region: emea
    domain: "bootcamp-{{region}}.confluent.io"

    jmxexporter_enabled: true
    jmxexporter_version: 1.4.0
    jmxexporter_jar_url: https://github.com/prometheus/jmx_exporter/releases/download/1.4.0/jmx_prometheus_javaagent-1.4.0.jar
    jmxexporter_jar_url_force: true

    deployment_strategy: parallel # instead of rolling

    ssl_enabled: true
    ssl_provided_keystore_and_truststore: true
    ssl_keystore_filepath: "/home/ubuntu/ssl/{{inventory_hostname}}-keystore.jks"
    ssl_keystore_key_password: changeme
    ssl_keystore_store_password: changeme
    ssl_truststore_filepath: "/home/ubuntu/ssl/kafka-truststore.jks"
    ssl_truststore_password: changeme
    ssl_truststore_ca_cert_alias: root-ca

    ssl_client_authentication: required
    kafka_controller_sasl_protocol: kerberos
    sasl_protocol: kerberos

    sasl_scram_users:
      alice:
        principal: alice
        password: alice-secret
      charlie:
        principal: charlie
        password: charlie-secret

    kafka_connect_confluent_hub_plugins:
      - confluentinc/kafka-connect-oracle-cdc:latest
      - debezium/debezium-connector-mysql:latest
      - debezium/debezium-connector-postgresql:latest

    kafka_connect_custom_properties:
      key.converter: io.confluent.connect.avro.AvroConverter
      key.converter.schema.registry.url: "{{schema_registry_url}}"
      key.converter.enhanced.avro.schema.support: true

      value.converter: io.confluent.connect.avro.AvroConverter
      value.converter.schema.registry.url: "{{schema_registry_url}}"
      value.converter.enhanced.avro.schema.support: true

      key.converter.basic.auth.credentials.source: USER_INFO
      key.converter.basic.auth.user.info: 'alice:alice-secret'

      value.converter.basic.auth.credentials.source: USER_INFO
      value.converter.basic.auth.user.info: 'alice:alice-secret'

      key.converter.schema.registry.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      key.converter.schema.registry.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
      key.converter.schema.registry.ssl.keystore.location: "{{kafka_connect_keystore_path}}"
      key.converter.schema.registry.ssl.keystore.password: "{{kafka_connect_keystore_storepass}}"
      key.converter.schema.registry.ssl.key.password: "{{kafka_connect_keystore_storepass}}"

      value.converter.schema.registry.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      value.converter.schema.registry.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
      value.converter.schema.registry.ssl.keystore.location: "{{kafka_connect_keystore_path}}"
      value.converter.schema.registry.ssl.keystore.password: "{{kafka_connect_keystore_storepass}}"
      value.converter.schema.registry.ssl.key.password: "{{kafka_connect_keystore_storepass}}"

      topic.creation.enable: true
    #
    # Kerberos settings
    #
    kerberos_configure: true
    kerberos:
      realm: "BOOTCAMP-{{region | upper}}.CONFLUENT.IO"
      kdc_hostname: "samba.bootcamp-{{region}}.confluent.io"
      admin_hostname: "samba.bootcamp-{{region}}.confluent.io"
      canonicalize: false
      # sasl_protocol: kerberos

    kafka_controller_kerberos_keytab_path: "/home/ubuntu/kerberos/controller-{{inventory_hostname_short}}.keytab"
    kafka_controller_kerberos_principal: "kafka/{{inventory_hostname}}@{{kerberos.realm | upper}}"
    kafka_broker_kerberos_keytab_path: "/home/ubuntu/kerberos/kafka-{{inventory_hostname_short}}.keytab"
    kafka_broker_kerberos_principal: "kafka/{{inventory_hostname}}@{{kerberos.realm | upper}}"
    schema_registry_kerberos_keytab_path: "/home/ubuntu/kerberos/schema-registry-{{inventory_hostname_short}}.keytab"
    schema_registry_kerberos_principal: "schema-registry/{{inventory_hostname}}@{{kerberos.realm | upper}}"
    kafka_rest_kerberos_keytab_path: "/home/ubuntu/kerberos/rest-{{inventory_hostname_short}}.keytab"
    kafka_rest_kerberos_principal: "rest/{{inventory_hostname}}@{{kerberos.realm | upper}}"
    kafka_connect_kerberos_keytab_path: "/home/ubuntu/kerberos/kafka-connect-{{inventory_hostname_short}}.keytab"
    kafka_connect_kerberos_principal: "kafka-connect/{{inventory_hostname}}@{{kerberos.realm | upper}}"
    control_center_next_gen_kerberos_keytab_path: "/home/ubuntu/kerberos/control-center-{{inventory_hostname_short}}.keytab"
    control_center_next_gen_kerberos_principal: "control-center/{{inventory_hostname}}@{{kerberos.realm | upper}}"

    # RBAC settings
    #
    rbac_enabled: true
    rbac_component_additional_system_admins: [ superuser, alice ]

    # OAUTH settings
    #
    auth_mode: oauth
    oauth_jwks_uri: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp/protocol/openid-connect/certs
    oauth_token_uri: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp/protocol/openid-connect/token
    oauth_issuer_url: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp
    oauth_sub_claim: azp
    oauth_expected_audience: account
    oauth_superuser_client_id: superuser
    oauth_superuser_client_password: superuser-secret
    schema_registry_oauth_user: sr-client
    schema_registry_oauth_password: sr-client-secret
    kafka_rest_oauth_user: rest-client
    kafka_rest_oauth_password: rest-client-secret
    kafka_connect_oauth_user: connect-client
    kafka_connect_oauth_password: connect-client-secret
    ksql_oauth_user: ksql-client
    ksql_oauth_password: ksql-client-secret
    control_center_next_gen_oauth_user: c3-client
    control_center_next_gen_oauth_password: c3-client-secret

    # variables to enable SSO in Control Center and confluent cli
    sso_mode: oidc
    sso_groups_claim: groups
    sso_sub_claim: preferred_username
    sso_issuer_url: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp
    sso_jwks_uri: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp/protocol/openid-connect/certs
    sso_authorize_uri: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp/protocol/openid-connect/auth
    sso_token_uri: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp/protocol/openid-connect/token
    sso_device_authorization_uri: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp/protocol/openid-connect/auth/device
    sso_cli: true
    sso_client_id: c3_sso_login
    sso_client_password: c3_sso_login_secret

    kafka_broker_custom_listeners:
      broker:
        name: BROKER
        port: 9091
        sasl_protocol: kerberos
      client_listener:
        name: CLIENT
        port: 9093
        sasl_protocol: none
      scram_listener:
        name: SCRAM
        port: 9094
        sasl_protocol: scram

    kafka_broker_custom_properties:
      confluent.license: # your license file here

      # Schema registry authentication
      confluent.bearer.auth.credentials.source: OAUTHBEARER
      confluent.bearer.auth.issuer.endpoint.url: https://samba.bootcamp-{{region}}.confluent.io:8443/realms/Bootcamp/protocol/openid-connect/token
      confluent.bearer.auth.client.id: superuser
      confluent.bearer.auth.client.secret: superuser-secret

      # Standard settings for broker
      auto.create.topics.enable: false
      default.replication.factor: 3
      min.insync.replicas: 2

      # From https://docs.confluent.io/platform/current/kafka/configure-mds/mutual-tls-auth-rbac.html#principal-mapping-rules-for-ssl-listeners-extract-a-principal-from-a-certificate
      listener.name.client.ssl.principal.mapping.rules: |
        RULE:^CN=([a-zA-Z0-9]*).*$/$1/L ,\
        DEFAULT
